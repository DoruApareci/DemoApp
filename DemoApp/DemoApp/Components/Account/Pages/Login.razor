@* @page "/Account/Login" *@

@* @rendermode InteractiveServer *@

@using DemoApp.Services.Auth
@using DemoApp.Services.Auth.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity


@inject LoginService LoginService

<section>
    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <label for="email" class="form-label">Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
            <label for="password" class="form-label">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="checkbox mb-3">
            <label class="form-label">
                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                Remember me
            </label>
        </div>
        <div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </div>
        <div>
            <p>
                <a href="Account/ForgotPassword">Forgot your password?</a>
            </p>
        </div>
    </EditForm>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = "/home";

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }   
    }

    public async Task LoginUser()
    {
        var success = await LoginService.LoginUserAsync(Input, ReturnUrl);
        if (!success)
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
}
